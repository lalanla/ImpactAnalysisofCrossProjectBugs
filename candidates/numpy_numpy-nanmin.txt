astropy_astropy-1.3.0: 3	
===================================================================	
find_coordinate_range: 43	
----------------------------	

"\n    Find the range of coordinates to use for ticks/grids\n\n    Parameters\n    ----------\n    transform : func\n        Function to transform pixel to world coordinates. Should take two\n        values (the pixel coordinates) and return two values (the world\n        coordinates).\n    extent : iterable\n        The range of the image viewport in pixel coordinates, given as [xmin,\n        xmax, ymin, ymax].\n    coord_types : list of str\n        Whether each coordinate is a ``'longitude'``, ``'latitude'``, or\n        ``'scalar'`` value.\n    coord_units : list of `astropy.units.Unit`\n        The units for each coordinate\n    "
from . import conf
nx = ny = conf.coordinate_range_samples
x = numpy.linspace(extent[0], extent[1], (nx + 1))
y = numpy.linspace(extent[2], extent[3], (ny + 1))
(xp, yp) = numpy.meshgrid(x, y)
world = transform.transform(np.vstack([xp.ravel(), yp.ravel()]).transpose())
ranges = []
for (coord_index, coord_type) in enumerate(coord_types):
    xw = world[:, coord_index].reshape(xp.shape)
    if (coord_type in ['longitude', 'latitude']):
        unit = coord_units[coord_index]
        xw = (xw * unit.to(units.deg))
        wjump = (xw[0, 1:] - xw[0, :(- 1)])
        with numpy.errstate(invalid='ignore'):
            reset = (numpy.abs(wjump) > 180.0)
        if numpy.any(reset):
            wjump = (wjump + (numpy.sign(wjump) * 180.0))
            wjump = (360.0 * (wjump / 360.0).astype(int))
            xw[0, 1:][reset] -= wjump[reset]
        wjump = (xw[1:] - xw[:1])
        with numpy.errstate(invalid='ignore'):
            reset = (numpy.abs(wjump) > 180.0)
        if numpy.any(reset):
            wjump = (wjump + (numpy.sign(wjump) * 180.0))
            wjump = (360.0 * (wjump / 360.0).astype(int))
            xw[1:][reset] -= wjump[reset]
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', RuntimeWarning)
        tempResult = nanmin(xw)
	
===================================================================	
find_coordinate_range: 48	
----------------------------	

"\n    Find the range of coordinates to use for ticks/grids\n\n    Parameters\n    ----------\n    transform : func\n        Function to transform pixel to world coordinates. Should take two\n        values (the pixel coordinates) and return two values (the world\n        coordinates).\n    extent : iterable\n        The range of the image viewport in pixel coordinates, given as [xmin,\n        xmax, ymin, ymax].\n    coord_types : list of str\n        Whether each coordinate is a ``'longitude'``, ``'latitude'``, or\n        ``'scalar'`` value.\n    coord_units : list of `astropy.units.Unit`\n        The units for each coordinate\n    "
from . import conf
nx = ny = conf.coordinate_range_samples
x = numpy.linspace(extent[0], extent[1], (nx + 1))
y = numpy.linspace(extent[2], extent[3], (ny + 1))
(xp, yp) = numpy.meshgrid(x, y)
world = transform.transform(np.vstack([xp.ravel(), yp.ravel()]).transpose())
ranges = []
for (coord_index, coord_type) in enumerate(coord_types):
    xw = world[:, coord_index].reshape(xp.shape)
    if (coord_type in ['longitude', 'latitude']):
        unit = coord_units[coord_index]
        xw = (xw * unit.to(units.deg))
        wjump = (xw[0, 1:] - xw[0, :(- 1)])
        with numpy.errstate(invalid='ignore'):
            reset = (numpy.abs(wjump) > 180.0)
        if numpy.any(reset):
            wjump = (wjump + (numpy.sign(wjump) * 180.0))
            wjump = (360.0 * (wjump / 360.0).astype(int))
            xw[0, 1:][reset] -= wjump[reset]
        wjump = (xw[1:] - xw[:1])
        with numpy.errstate(invalid='ignore'):
            reset = (numpy.abs(wjump) > 180.0)
        if numpy.any(reset):
            wjump = (wjump + (numpy.sign(wjump) * 180.0))
            wjump = (360.0 * (wjump / 360.0).astype(int))
            xw[1:][reset] -= wjump[reset]
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', RuntimeWarning)
        xw_min = numpy.nanmin(xw)
        xw_max = numpy.nanmax(xw)
    if (coord_type in ['longitude', 'latitude']):
        with warnings.catch_warnings():
            warnings.simplefilter('ignore', RuntimeWarning)
            tempResult = nanmin((xw % 360.0))
	
===================================================================	
find_coordinate_range: 56	
----------------------------	

"\n    Find the range of coordinates to use for ticks/grids\n\n    Parameters\n    ----------\n    transform : func\n        Function to transform pixel to world coordinates. Should take two\n        values (the pixel coordinates) and return two values (the world\n        coordinates).\n    extent : iterable\n        The range of the image viewport in pixel coordinates, given as [xmin,\n        xmax, ymin, ymax].\n    coord_types : list of str\n        Whether each coordinate is a ``'longitude'``, ``'latitude'``, or\n        ``'scalar'`` value.\n    coord_units : list of `astropy.units.Unit`\n        The units for each coordinate\n    "
from . import conf
nx = ny = conf.coordinate_range_samples
x = numpy.linspace(extent[0], extent[1], (nx + 1))
y = numpy.linspace(extent[2], extent[3], (ny + 1))
(xp, yp) = numpy.meshgrid(x, y)
world = transform.transform(np.vstack([xp.ravel(), yp.ravel()]).transpose())
ranges = []
for (coord_index, coord_type) in enumerate(coord_types):
    xw = world[:, coord_index].reshape(xp.shape)
    if (coord_type in ['longitude', 'latitude']):
        unit = coord_units[coord_index]
        xw = (xw * unit.to(units.deg))
        wjump = (xw[0, 1:] - xw[0, :(- 1)])
        with numpy.errstate(invalid='ignore'):
            reset = (numpy.abs(wjump) > 180.0)
        if numpy.any(reset):
            wjump = (wjump + (numpy.sign(wjump) * 180.0))
            wjump = (360.0 * (wjump / 360.0).astype(int))
            xw[0, 1:][reset] -= wjump[reset]
        wjump = (xw[1:] - xw[:1])
        with numpy.errstate(invalid='ignore'):
            reset = (numpy.abs(wjump) > 180.0)
        if numpy.any(reset):
            wjump = (wjump + (numpy.sign(wjump) * 180.0))
            wjump = (360.0 * (wjump / 360.0).astype(int))
            xw[1:][reset] -= wjump[reset]
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', RuntimeWarning)
        xw_min = numpy.nanmin(xw)
        xw_max = numpy.nanmax(xw)
    if (coord_type in ['longitude', 'latitude']):
        with warnings.catch_warnings():
            warnings.simplefilter('ignore', RuntimeWarning)
            xw_min_check = numpy.nanmin((xw % 360.0))
            xw_max_check = numpy.nanmax((xw % 360.0))
        if ((xw_max_check - xw_min_check) <= (xw_max - xw_min) < 360.0):
            xw_min = xw_min_check
            xw_max = xw_max_check
    if (coord_type in ['longitude', 'latitude']):
        with warnings.catch_warnings():
            warnings.simplefilter('ignore', RuntimeWarning)
            tempResult = nanmin(wrap_180(xw))
	
***************************************************	
scipy_scipy-0.19.0: 1	
===================================================================	
basic_stats: 317	
----------------------------	

nbfac = ((data.size * 1.0) / (data.size - 1))
tempResult = nanmin(data)
	
***************************************************	
sklearn_sklearn-0.18.0: 0	
***************************************************	
matplotlib_matplotlib-2.0.0: 4	
===================================================================	
ExtremeFinderCycle.__call__: 254	
----------------------------	

'\n        get extreme values.\n\n        x1, y1, x2, y2 in image coordinates (0-based)\n        nx, ny : number of divisions in each axis\n        '
(x_, y_) = (numpy.linspace(x1, x2, self.nx), numpy.linspace(y1, y2, self.ny))
(x, y) = numpy.meshgrid(x_, y_)
(lon, lat) = transform_xy(numpy.ravel(x), numpy.ravel(y))
with numpy.errstate(invalid='ignore'):
    if (self.lon_cycle is not None):
        tempResult = nanmin(lon)
	
===================================================================	
ExtremeFinderCycle.__call__: 257	
----------------------------	

'\n        get extreme values.\n\n        x1, y1, x2, y2 in image coordinates (0-based)\n        nx, ny : number of divisions in each axis\n        '
(x_, y_) = (numpy.linspace(x1, x2, self.nx), numpy.linspace(y1, y2, self.ny))
(x, y) = numpy.meshgrid(x_, y_)
(lon, lat) = transform_xy(numpy.ravel(x), numpy.ravel(y))
with numpy.errstate(invalid='ignore'):
    if (self.lon_cycle is not None):
        lon0 = numpy.nanmin(lon)
        lon -= (360.0 * ((lon - lon0) > 180.0))
    if (self.lat_cycle is not None):
        tempResult = nanmin(lat)
	
===================================================================	
ExtremeFinderCycle.__call__: 259	
----------------------------	

'\n        get extreme values.\n\n        x1, y1, x2, y2 in image coordinates (0-based)\n        nx, ny : number of divisions in each axis\n        '
(x_, y_) = (numpy.linspace(x1, x2, self.nx), numpy.linspace(y1, y2, self.ny))
(x, y) = numpy.meshgrid(x_, y_)
(lon, lat) = transform_xy(numpy.ravel(x), numpy.ravel(y))
with numpy.errstate(invalid='ignore'):
    if (self.lon_cycle is not None):
        lon0 = numpy.nanmin(lon)
        lon -= (360.0 * ((lon - lon0) > 180.0))
    if (self.lat_cycle is not None):
        lat0 = numpy.nanmin(lat)
        lat -= (360.0 * ((lat - lat0) > 180.0))
tempResult = nanmin(lon)
	
===================================================================	
ExtremeFinderCycle.__call__: 260	
----------------------------	

'\n        get extreme values.\n\n        x1, y1, x2, y2 in image coordinates (0-based)\n        nx, ny : number of divisions in each axis\n        '
(x_, y_) = (numpy.linspace(x1, x2, self.nx), numpy.linspace(y1, y2, self.ny))
(x, y) = numpy.meshgrid(x_, y_)
(lon, lat) = transform_xy(numpy.ravel(x), numpy.ravel(y))
with numpy.errstate(invalid='ignore'):
    if (self.lon_cycle is not None):
        lon0 = numpy.nanmin(lon)
        lon -= (360.0 * ((lon - lon0) > 180.0))
    if (self.lat_cycle is not None):
        lat0 = numpy.nanmin(lat)
        lat -= (360.0 * ((lat - lat0) > 180.0))
(lon_min, lon_max) = (numpy.nanmin(lon), numpy.nanmax(lon))
tempResult = nanmin(lat)
	
***************************************************	
ipython_ipython-6.1.0: 0	
***************************************************	
pandas_pandas-0.19.2: 2	
===================================================================	
KdePlot._get_ind: 1444	
----------------------------	

if (self.ind is None):
    tempResult = nanmin(y)
	
===================================================================	
KdePlot._get_ind: 1445	
----------------------------	

if (self.ind is None):
    sample_range = (numpy.nanmax(y) - numpy.nanmin(y))
    tempResult = nanmin(y)
	
***************************************************	
dask_dask-0.7.0: 1	
===================================================================	
test_nan: 190	
----------------------------	

x = numpy.array([[1, numpy.nan, 3, 4], [5, 6, 7, numpy.nan], [9, 10, 11, 12]])
d = dask.array.from_array(x, chunks=(2, 2))
assert eq(numpy.nansum(x), dask.array.nansum(d))
assert eq(numpy.nansum(x, axis=0), dask.array.nansum(d, axis=0))
assert eq(numpy.nanmean(x, axis=1), dask.array.nanmean(d, axis=1))
tempResult = nanmin(x, axis=1)
	
***************************************************	
nengo_nengo-2.0.0: 0	
***************************************************	
sympy_sympy-1.0.0: 0	
***************************************************	
daducci_amico-dev: 0	
***************************************************	
aplpy_aplpy-1.1.1: 0	
***************************************************	
markovmodel_msmtools-1.0.2: 0	
***************************************************	
nilearn_nilearn-0.4.0: 13	
===================================================================	
_load_anat: 195	
----------------------------	

' Internal function used to load anatomy, for optional diming\n    '
vmin = None
vmax = None
if ((anat_img is False) or (anat_img is None)):
    if (black_bg == 'auto'):
        black_bg = False
    return (anat_img, black_bg, vmin, vmax)
if (anat_img is MNI152TEMPLATE):
    anat_img.load()
    vmin = 0
    vmax = anat_img.vmax
    if (black_bg == 'auto'):
        black_bg = False
else:
    anat_img = _utils.check_niimg_3d(anat_img)
    data = _safe_get_data(anat_img, ensure_finite=True)
    anat_img = new_img_like(anat_img, data, affine=anat_img.affine)
    if (dim or (black_bg == 'auto')):
        tempResult = nanmin(data)
	
===================================================================	
_get_colorbar_and_data_ranges: 39	
----------------------------	

' Internal function for setting colormap and colorbar limits\n\n    Used by for plot_stat_map and plot_glass_brain.\n\n    The limits for the colormap will always be set to range from -vmax to vmax.\n    The limits for the colorbar depend on the symmetric_cbar argument, please\n    refer to docstring of plot_stat_map.\n    '
if ('vmin' in kwargs):
    raise ValueError('this function does not accept a "vmin" argument, as it uses a symmetrical range defined via the vmax argument. To threshold the plotted map, use the "threshold" argument')
if ((vmax is None) or (symmetric_cbar in ['auto', False])):
    if hasattr(stat_map_data, '_mask'):
        stat_map_data = numpy.asarray(stat_map_data[numpy.logical_not(stat_map_data._mask)])
    stat_map_max = numpy.nanmax(stat_map_data)
    if (force_min_stat_map_value is None):
        tempResult = nanmin(stat_map_data)
	
===================================================================	
plot_surf: 91	
----------------------------	

" Plotting of surfaces with optional background and data\n\n    .. versionadded:: 0.3\n\n    Parameters\n    ----------\n    surf_mesh: str or list of two numpy.ndarray\n        Surface mesh geometry, can be a file (valid formats are\n        .gii or Freesurfer specific files such as .orig, .pial,\n        .sphere, .white, .inflated) or\n        a list of two Numpy arrays, the first containing the x-y-z coordinates\n        of the mesh vertices, the second containing the indices\n        (into coords) of the mesh faces.\n\n    surf_map: str or numpy.ndarray, optional.\n        Data to be displayed on the surface mesh. Can be a file (valid formats\n        are .gii, .mgz, .nii, .nii.gz, or Freesurfer specific files such as\n        .thickness, .curv, .sulc, .annot, .label) or\n        a Numpy array\n\n    bg_map: Surface data object (to be defined), optional,\n        Background image to be plotted on the mesh underneath the\n        surf_data in greyscale, most likely a sulcal depth map for\n        realistic shading.\n\n    hemi : {'left', 'right'}, default is 'left'\n        Hemisphere to display.\n\n    view: {'lateral', 'medial', 'dorsal', 'ventral', 'anterior', 'posterior'}, default is 'lateral'\n        View of the surface that is rendered.\n\n    cmap: matplotlib colormap, str or colormap object, default is None\n        To use for plotting of the stat_map. Either a string\n        which is a name of a matplotlib colormap, or a matplotlib\n        colormap object. If None, matplolib default will be chosen\n\n    avg_method: {'mean', 'median'}, default is 'mean'\n        How to average vertex values to derive the face value, mean results\n        in smooth, median in sharp boundaries.\n\n    threshold : a number, None, or 'auto', default is None.\n        If None is given, the image is not thresholded.\n        If a number is given, it is used to threshold the image, values\n        below the threshold (in absolute value) are plotted as transparent.\n\n    alpha: float, alpha level of the mesh (not surf_data), default 'auto'\n        If 'auto' is chosen, alpha will default to .5 when no bg_map\n        is passed and to 1 if a bg_map is passed.\n\n    bg_on_stat: bool, default is False\n        If True, and a bg_map is specified, the surf_data data is multiplied\n        by the background image, so that e.g. sulcal depth is visible beneath\n        the surf_data.\n        NOTE: that this non-uniformly changes the surf_data values according\n        to e.g the sulcal depth.\n\n    darkness: float, between 0 and 1, default is 1\n        Specifying the darkness of the background image.\n        1 indicates that the original values of the background are used.\n        .5 indicates the background values are reduced by half before being\n        applied.\n\n    vmin, vmax: lower / upper bound to plot surf_data values\n        If None , the values will be set to min/max of the data\n\n    title : str, optional\n        Figure title.\n\n    output_file: str, or None, optional\n        The name of an image file to export plot to. Valid extensions\n        are .png, .pdf, .svg. If output_file is not None, the plot\n        is saved to a file, and the display is closed.\n\n    axes: instance of matplotlib axes, None, optional\n        The axes instance to plot to. The projection must be '3d' (e.g.,\n        `figure, axes = plt.subplots(subplot_kw={'projection': '3d'})`,\n        where axes should be passed.).\n        If None, a new axes is created.\n\n    figure: instance of matplotlib figure, None, optional\n        The figure instance to plot to. If None, a new figure is created.\n\n    See Also\n    --------\n    nilearn.datasets.fetch_surf_fsaverage5 : For surface data object to be\n        used as background map for this plotting function.\n\n    nilearn.plotting.plot_surf_roi : For plotting statistical maps on brain\n        surfaces.\n\n    nilearn.plotting.plot_surf_stat_map for plotting statistical maps on\n        brain surfaces.\n    "
mesh = load_surf_mesh(surf_mesh)
(coords, faces) = (mesh[0], mesh[1])
limits = [coords.min(), coords.max()]
if (hemi == 'right'):
    if (view == 'lateral'):
        (elev, azim) = (0, 0)
    elif (view == 'medial'):
        (elev, azim) = (0, 180)
    elif (view == 'dorsal'):
        (elev, azim) = (90, 0)
    elif (view == 'ventral'):
        (elev, azim) = (270, 0)
    elif (view == 'anterior'):
        (elev, azim) = (0, 90)
    elif (view == 'posterior'):
        (elev, azim) = (0, 270)
    else:
        raise ValueError('view must be one of lateral, medial, dorsal, ventral, anterior, or posterior')
elif (hemi == 'left'):
    if (view == 'medial'):
        (elev, azim) = (0, 0)
    elif (view == 'lateral'):
        (elev, azim) = (0, 180)
    elif (view == 'dorsal'):
        (elev, azim) = (90, 0)
    elif (view == 'ventral'):
        (elev, azim) = (270, 0)
    elif (view == 'anterior'):
        (elev, azim) = (0, 90)
    elif (view == 'posterior'):
        (elev, azim) = (0, 270)
    else:
        raise ValueError('view must be one of lateral, medial, dorsal, ventral, anterior, or posterior')
else:
    raise ValueError('hemi must be one of right or left')
if (alpha == 'auto'):
    if (bg_map is None):
        alpha = 0.5
    else:
        alpha = 1
if (cmap is None):
    cmap = matplotlib.pyplot.cm.get_cmap(matplotlib.pyplot.rcParamsDefault['image.cmap'])
elif isinstance(cmap, _basestring):
    cmap = matplotlib.pyplot.cm.get_cmap(cmap)
if (axes is None):
    if (figure is None):
        figure = matplotlib.pyplot.figure()
    axes = figure.add_subplot(111, projection='3d', xlim=limits, ylim=limits)
else:
    if (figure is None):
        figure = axes.get_figure()
    axes.set_xlim(*limits)
    axes.set_ylim(*limits)
axes.view_init(elev=elev, azim=azim)
axes.set_axis_off()
p3dcollec = axes.plot_trisurf(coords[:, 0], coords[:, 1], coords[:, 2], triangles=faces, linewidth=0.0, antialiased=False, color='white')
if ((bg_map is not None) or (surf_map is not None)):
    face_colors = numpy.ones((faces.shape[0], 4))
    if (bg_map is not None):
        bg_data = load_surf_data(bg_map)
        if (bg_data.shape[0] != coords.shape[0]):
            raise ValueError('The bg_map does not have the same number of vertices as the mesh.')
        bg_faces = numpy.mean(bg_data[faces], axis=1)
        bg_faces = (bg_faces - bg_faces.min())
        bg_faces = (bg_faces / bg_faces.max())
        bg_faces *= darkness
        face_colors = matplotlib.pyplot.cm.gray_r(bg_faces)
    face_colors[:, 3] = (alpha * face_colors[:, 3])
    if (surf_map is not None):
        surf_map_data = load_surf_data(surf_map)
        if (len(surf_map_data.shape) is not 1):
            raise ValueError(('surf_map can only have one dimension but has%i dimensions' % len(surf_map_data.shape)))
        if (surf_map_data.shape[0] != coords.shape[0]):
            raise ValueError('The surf_map does not have the same number of vertices as the mesh.')
        if (avg_method == 'mean'):
            surf_map_faces = numpy.mean(surf_map_data[faces], axis=1)
        elif (avg_method == 'median'):
            surf_map_faces = numpy.median(surf_map_data[faces], axis=1)
        if (vmin is None):
            tempResult = nanmin(surf_map_faces)
	
===================================================================	
test_get_colorbar_and_data_ranges_pos_neg: 332	
----------------------------	

data = numpy.array([[(- 0.5), 1.0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [1.5, 2.5, 3.0]])
kwargs = {'aspect': 'auto', 'alpha': 0.9}
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=None, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(data)))
assert_equal(vmax, numpy.nanmax(data))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=2, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=None, symmetric_cbar=False, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(data)))
assert_equal(vmax, numpy.nanmax(data))
tempResult = nanmin(data)
	
===================================================================	
test_get_colorbar_and_data_ranges_pos_neg: 337	
----------------------------	

data = numpy.array([[(- 0.5), 1.0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [1.5, 2.5, 3.0]])
kwargs = {'aspect': 'auto', 'alpha': 0.9}
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=None, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(data)))
assert_equal(vmax, numpy.nanmax(data))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=2, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=None, symmetric_cbar=False, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(data)))
assert_equal(vmax, numpy.nanmax(data))
assert_equal(cbar_vmin, numpy.nanmin(data))
assert_equal(cbar_vmax, numpy.nanmax(data))
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data, vmax=2, symmetric_cbar=False, kwargs=kwargs)
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
tempResult = nanmin(data)
	
===================================================================	
test_get_colorbar_and_data_ranges_masked_array: 434	
----------------------------	

data = numpy.array([[(- 0.5), 1.0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [1.5, 2.5, 3.0]])
masked_data = numpy.ma.masked_greater(data, 2.0)
filled_data = masked_data.filled(numpy.nan)
kwargs = {'aspect': 'auto', 'alpha': 0.9}
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=None, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(filled_data)))
assert_equal(vmax, numpy.nanmax(filled_data))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=2, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=None, symmetric_cbar=False, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(filled_data)))
assert_equal(vmax, numpy.nanmax(filled_data))
tempResult = nanmin(filled_data)
	
===================================================================	
test_get_colorbar_and_data_ranges_masked_array: 439	
----------------------------	

data = numpy.array([[(- 0.5), 1.0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [1.5, 2.5, 3.0]])
masked_data = numpy.ma.masked_greater(data, 2.0)
filled_data = masked_data.filled(numpy.nan)
kwargs = {'aspect': 'auto', 'alpha': 0.9}
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=None, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(filled_data)))
assert_equal(vmax, numpy.nanmax(filled_data))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=2, symmetric_cbar=True, kwargs=kwargs)
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=None, symmetric_cbar=False, kwargs=kwargs)
assert_equal(vmin, (- numpy.nanmax(filled_data)))
assert_equal(vmax, numpy.nanmax(filled_data))
assert_equal(cbar_vmin, numpy.nanmin(filled_data))
assert_equal(cbar_vmax, numpy.nanmax(filled_data))
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(masked_data, vmax=2, symmetric_cbar=False, kwargs=kwargs)
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
tempResult = nanmin(filled_data)
	
===================================================================	
test_get_colorbar_and_data_ranges_neg: 386	
----------------------------	

data_neg = numpy.array([[(- 0.5), 0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [0, 0, 0]])
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=True, kwargs={})
tempResult = nanmin(data_neg)
	
===================================================================	
test_get_colorbar_and_data_ranges_neg: 387	
----------------------------	

data_neg = numpy.array([[(- 0.5), 0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [0, 0, 0]])
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=True, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
tempResult = nanmin(data_neg)
	
===================================================================	
test_get_colorbar_and_data_ranges_neg: 396	
----------------------------	

data_neg = numpy.array([[(- 0.5), 0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [0, 0, 0]])
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=True, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
assert_equal(vmax, (- numpy.nanmin(data_neg)))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=2, symmetric_cbar=True, kwargs={})
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=False, kwargs={})
tempResult = nanmin(data_neg)
	
===================================================================	
test_get_colorbar_and_data_ranges_neg: 397	
----------------------------	

data_neg = numpy.array([[(- 0.5), 0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [0, 0, 0]])
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=True, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
assert_equal(vmax, (- numpy.nanmin(data_neg)))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=2, symmetric_cbar=True, kwargs={})
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=False, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
tempResult = nanmin(data_neg)
	
===================================================================	
test_get_colorbar_and_data_ranges_neg: 406	
----------------------------	

data_neg = numpy.array([[(- 0.5), 0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [0, 0, 0]])
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=True, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
assert_equal(vmax, (- numpy.nanmin(data_neg)))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=2, symmetric_cbar=True, kwargs={})
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=False, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
assert_equal(vmax, (- numpy.nanmin(data_neg)))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, 0)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=2, symmetric_cbar=False, kwargs={})
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, 0)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar='auto', kwargs={})
tempResult = nanmin(data_neg)
	
===================================================================	
test_get_colorbar_and_data_ranges_neg: 407	
----------------------------	

data_neg = numpy.array([[(- 0.5), 0, numpy.nan], [0.0, numpy.nan, (- 0.2)], [0, 0, 0]])
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=True, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
assert_equal(vmax, (- numpy.nanmin(data_neg)))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=2, symmetric_cbar=True, kwargs={})
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, None)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar=False, kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
assert_equal(vmax, (- numpy.nanmin(data_neg)))
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, 0)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=2, symmetric_cbar=False, kwargs={})
assert_equal(vmin, (- 2))
assert_equal(vmax, 2)
assert_equal(cbar_vmin, None)
assert_equal(cbar_vmax, 0)
(cbar_vmin, cbar_vmax, vmin, vmax) = _get_colorbar_and_data_ranges(data_neg, vmax=None, symmetric_cbar='auto', kwargs={})
assert_equal(vmin, numpy.nanmin(data_neg))
tempResult = nanmin(data_neg)
	
***************************************************	
poliastro_poliastro-0.8.0: 0	
***************************************************	
skimage_skimage-0.13.0: 0	
***************************************************	
sunpy_sunpy-0.8.0: 1	
===================================================================	
MDIMap.__init__: 88	
----------------------------	

sunpy.map.GenericMap.__init__(self, data, header, **kwargs)
self.meta['detector'] = 'MDI'
self._fix_dsun()
self.meta['wavelnth'] = numpy.nan
self.meta['waveunit'] = 'nm'
self._nickname = ((self.detector + ' ') + self.measurement)
tempResult = nanmin(self.data)
	
***************************************************	
spacetelescope_synphot-0.1: 0	
***************************************************	
librosa_librosa-0.5.1: 1	
===================================================================	
spectral_rolloff: 105	
----------------------------	

"Compute roll-off frequency\n\n    Parameters\n    ----------\n    y : np.ndarray [shape=(n,)] or None\n        audio time series\n\n    sr : number > 0 [scalar]\n        audio sampling rate of `y`\n\n    S : np.ndarray [shape=(d, t)] or None\n        (optional) spectrogram magnitude\n\n    n_fft : int > 0 [scalar]\n        FFT window size\n\n    hop_length : int > 0 [scalar]\n        hop length for STFT. See `librosa.core.stft` for details.\n\n    freq : None or np.ndarray [shape=(d,) or shape=(d, t)]\n        Center frequencies for spectrogram bins.\n        If `None`, then FFT bin center frequencies are used.\n        Otherwise, it can be a single array of `d` center frequencies,\n\n        .. note:: `freq` is assumed to be sorted in increasing order\n\n    roll_percent : float [0 < roll_percent < 1]\n        Roll-off percentage.\n\n    Returns\n    -------\n    rolloff : np.ndarray [shape=(1, t)]\n        roll-off frequency for each frame\n\n\n    Examples\n    --------\n    From time-series input\n\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)\n    >>> rolloff\n    array([[ 8376.416,   968.994, ...,  8925.513,  9108.545]])\n\n    From spectrogram input\n\n    >>> S, phase = librosa.magphase(librosa.stft(y))\n    >>> librosa.feature.spectral_rolloff(S=S, sr=sr)\n    array([[ 8376.416,   968.994, ...,  8925.513,  9108.545]])\n\n    >>> # With a higher roll percentage:\n    >>> y, sr = librosa.load(librosa.util.example_audio_file())\n    >>> librosa.feature.spectral_rolloff(y=y, sr=sr, roll_percent=0.95)\n    array([[ 10012.939,   3003.882, ...,  10034.473,  10077.539]])\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.figure()\n    >>> plt.subplot(2, 1, 1)\n    >>> plt.semilogy(rolloff.T, label='Roll-off frequency')\n    >>> plt.ylabel('Hz')\n    >>> plt.xticks([])\n    >>> plt.xlim([0, rolloff.shape[-1]])\n    >>> plt.legend()\n    >>> plt.subplot(2, 1, 2)\n    >>> librosa.display.specshow(librosa.amplitude_to_db(S, ref=np.max),\n    ...                          y_axis='log', x_axis='time')\n    >>> plt.title('log Power spectrogram')\n    >>> plt.tight_layout()\n\n    "
if (not (0.0 < roll_percent < 1.0)):
    raise ParameterError('roll_percent must lie in the range (0, 1)')
(S, n_fft) = _spectrogram(y=y, S=S, n_fft=n_fft, hop_length=hop_length)
if (not numpy.isrealobj(S)):
    raise ParameterError('Spectral rolloff is only defined with real-valued input')
elif numpy.any((S < 0)):
    raise ParameterError('Spectral rolloff is only defined with non-negative energies')
if (freq is None):
    freq = fft_frequencies(sr=sr, n_fft=n_fft)
if (freq.ndim == 1):
    freq = freq.reshape(((- 1), 1))
total_energy = numpy.cumsum(S, axis=0)
threshold = (roll_percent * total_energy[(- 1)])
ind = numpy.where((total_energy < threshold), numpy.nan, 1)
tempResult = nanmin((ind * freq), axis=0, keepdims=True)
	
***************************************************	
mne_python-0.15.0: 0	
***************************************************	
