astropy_astropy-1.3.0: 1	
===================================================================	
sigma_clipped_stats: 70	
----------------------------	

'\n    Calculate sigma-clipped statistics from data.\n\n    For example, sigma-clipped statistics can be used to estimate the\n    background and background noise in an image.\n\n    Parameters\n    ----------\n    data : array-like\n        Data array or object that can be converted to an array.\n\n    mask : `numpy.ndarray` (bool), optional\n        A boolean mask with the same shape as ``data``, where a `True`\n        value indicates the corresponding element of ``data`` is masked.\n        Masked pixels are excluded when computing the image statistics.\n\n    mask_value : float, optional\n        An image data value (e.g., ``0.0``) that is ignored when\n        computing the image statistics.  ``mask_value`` will be masked\n        in addition to any input ``mask``.\n\n    sigma : float, optional\n        The number of standard deviations to use as the lower and upper\n        clipping limit.  These limits are overridden by ``sigma_lower``\n        and ``sigma_upper``, if input. Defaults to 3.\n\n    sigma_lower : float, optional\n        The number of standard deviations to use as the lower bound for\n        the clipping limit.  If `None` then the value of ``sigma`` is used.\n        Defaults to `None`.\n\n    sigma_upper : float, optional\n        The number of standard deviations to use as the upper bound for\n        the clipping limit.  If `None` then the value of ``sigma`` is used.\n        Defaults to `None`.\n\n    iters : int, optional\n        The number of iterations to perform sigma clipping, or `None` to\n        clip until convergence is achieved (i.e., continue until the\n        last iteration clips nothing) when calculating the image\n        statistics. Defaults to 5.\n\n    cenfunc : callable, optional\n        The function used to compute the center for the clipping. Must\n        be a callable that takes in a masked array and outputs the\n        central value. Defaults to the median (`numpy.ma.median`).\n\n    stdfunc : callable, optional\n        The function used to compute the standard deviation about the\n        center. Must be a callable that takes in a masked array and\n        outputs a width estimator. Masked (rejected) pixels are those\n        where::\n\n             deviation < (-sigma_lower * stdfunc(deviation))\n             deviation > (sigma_upper * stdfunc(deviation))\n\n        where::\n\n            deviation = data - cenfunc(data [,axis=int])\n\n        Defaults to the standard deviation (`numpy.std`).\n\n    axis : int or `None`, optional\n        If not `None`, clip along the given axis.  For this case,\n        ``axis`` will be passed on to ``cenfunc`` and ``stdfunc``, which\n        are expected to return an array with the axis dimension removed\n        (like the numpy functions).  If `None`, clip over all axes.\n        Defaults to `None`.\n\n    Returns\n    -------\n    mean, median, stddev : float\n        The mean, median, and standard deviation of the sigma-clipped\n        image.\n    '
if (mask is not None):
    data = numpy.ma.MaskedArray(data, mask)
if (mask_value is not None):
    data = numpy.ma.masked_values(data, mask_value)
data_clip = sigma_clip(data, sigma=sigma, sigma_lower=sigma_lower, sigma_upper=sigma_upper, iters=iters, cenfunc=cenfunc, stdfunc=stdfunc, axis=axis)
mean = numpy.ma.mean(data_clip, axis=axis)
tempResult = median(data_clip, axis=axis)
	
***************************************************	
scipy_scipy-0.19.0: 4	
===================================================================	
sen_seasonal_slopes: 373	
----------------------------	

x = numpy.ma.array(x, subok=True, copy=False, ndmin=2)
(n, _) = x.shape
szn_slopes = numpy.ma.vstack([((x[(i + 1):] - x[i]) / numpy.arange(1, (n - i))[:, None]) for i in range(n)])
tempResult = median(szn_slopes, axis=0)
	
===================================================================	
sen_seasonal_slopes: 374	
----------------------------	

x = numpy.ma.array(x, subok=True, copy=False, ndmin=2)
(n, _) = x.shape
szn_slopes = numpy.ma.vstack([((x[(i + 1):] - x[i]) / numpy.arange(1, (n - i))[:, None]) for i in range(n)])
szn_medslopes = numpy.ma.median(szn_slopes, axis=0)
tempResult = median(szn_slopes, axis=None)
	
===================================================================	
compare_medians_ms: 155	
----------------------------	

'\n    Compares the medians from two independent groups along the given axis.\n\n    The comparison is performed using the McKean-Schrader estimate of the\n    standard error of the medians.\n\n    Parameters\n    ----------\n    group_1 : array_like\n        First dataset.\n    group_2 : array_like\n        Second dataset.\n    axis : int, optional\n        Axis along which the medians are estimated. If None, the arrays are\n        flattened.  If `axis` is not None, then `group_1` and `group_2`\n        should have the same shape.\n\n    Returns\n    -------\n    compare_medians_ms : {float, ndarray}\n        If `axis` is None, then returns a float, otherwise returns a 1-D\n        ndarray of floats with a length equal to the length of `group_1`\n        along `axis`.\n\n    '
tempResult = median(group_1, axis=axis)
	
===================================================================	
compare_medians_ms: 155	
----------------------------	

'\n    Compares the medians from two independent groups along the given axis.\n\n    The comparison is performed using the McKean-Schrader estimate of the\n    standard error of the medians.\n\n    Parameters\n    ----------\n    group_1 : array_like\n        First dataset.\n    group_2 : array_like\n        Second dataset.\n    axis : int, optional\n        Axis along which the medians are estimated. If None, the arrays are\n        flattened.  If `axis` is not None, then `group_1` and `group_2`\n        should have the same shape.\n\n    Returns\n    -------\n    compare_medians_ms : {float, ndarray}\n        If `axis` is None, then returns a float, otherwise returns a 1-D\n        ndarray of floats with a length equal to the length of `group_1`\n        along `axis`.\n\n    '
tempResult = median(group_2, axis=axis)
	
***************************************************	
sklearn_sklearn-0.18.0: 1	
===================================================================	
Imputer._dense_fit: 127	
----------------------------	

'Fit the transformer on dense data.'
X = check_array(X, force_all_finite=False)
mask = _get_mask(X, missing_values)
masked_X = numpy.ma.masked_array(X, mask=mask)
if (strategy == 'mean'):
    mean_masked = numpy.ma.mean(masked_X, axis=axis)
    mean = numpy.ma.getdata(mean_masked)
    mean[numpy.ma.getmask(mean_masked)] = numpy.nan
    return mean
elif (strategy == 'median'):
    if (tuple((int(v) for v in numpy.__version__.split('.')[:2])) < (1, 5)):
        masked_X.mask = numpy.logical_or(masked_X.mask, numpy.isnan(X))
    tempResult = median(masked_X, axis=axis)
	
***************************************************	
matplotlib_matplotlib-2.0.0: 0	
***************************************************	
ipython_ipython-6.1.0: 0	
***************************************************	
pandas_pandas-0.19.2: 0	
***************************************************	
dask_dask-0.7.0: 0	
***************************************************	
nengo_nengo-2.0.0: 0	
***************************************************	
sympy_sympy-1.0.0: 0	
***************************************************	
daducci_amico-dev: 0	
***************************************************	
aplpy_aplpy-1.1.1: 0	
***************************************************	
markovmodel_msmtools-1.0.2: 0	
***************************************************	
nilearn_nilearn-0.4.0: 0	
***************************************************	
poliastro_poliastro-0.8.0: 0	
***************************************************	
skimage_skimage-0.13.0: 0	
***************************************************	
sunpy_sunpy-0.8.0: 0	
***************************************************	
spacetelescope_synphot-0.1: 0	
***************************************************	
librosa_librosa-0.5.1: 0	
***************************************************	
mne_python-0.15.0: 0	
***************************************************